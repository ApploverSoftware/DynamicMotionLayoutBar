package com.applover.dynamicmotionlayoutbar.utils

import android.content.Context
import android.util.AttributeSet
import androidx.constraintlayout.motion.widget.MotionLayout
import androidx.constraintlayout.motion.widget.MotionScene
import androidx.constraintlayout.motion.widget.TransitionBuilder
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.constraintlayout.widget.ConstraintSet

/**
 * Helper class for creating simple animations with single transition
 */
abstract class TwoStateMotionLayout(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0,
) : MotionLayout(context, attrs, defStyleAttr) {

    protected var animationDuration = DEFAULT_ANIMATION_SPEED
    protected var startAtTheEndTransition = false

    /**
     * Called only when view created in XML
     */
    override fun onFinishInflate() {
        super.onFinishInflate()
        setupView()
    }

    /**
     * Create view and create transition based on created constraint sets
     */
    protected fun setupView() {
        val constraintSets = createViewsAndConstraintSets()
        val scene = MotionScene(this)
        val transition = scene.createTransition(constraintSets)
        scene.addTransition(transition)
        setScene(scene)
        setTransition(transition)
        setTransitionDuration(animationDuration)
        if (startAtTheEndTransition) {
            progress = 1f
        }
    }

    abstract fun ConstraintLayout.createViewsAndConstraintSets(): Pair<ConstraintSet, ConstraintSet>

    /**
     * To create transition we need to link start and end constraint sets together
     * For such simple case we don't need to remember ids generated by generateViewId
     */
    private fun MotionScene.createTransition(sets: Pair<ConstraintSet, ConstraintSet>): MotionScene.Transition =
        TransitionBuilder.buildTransition(
            this,
            generateViewId(),
            generateViewId(),
            sets.first,
            generateViewId(),
            sets.second,
        )

    companion object {
        private const val DEFAULT_ANIMATION_SPEED = 500
    }
}
